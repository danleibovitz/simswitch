# Hello, world!
#
# This is an example function named 'hello'
# which prints 'Hello, world!'.
#
# You can learn more about package authoring with RStudio at:
#
#   http://r-pkgs.had.co.nz/
#
# Some useful keyboard shortcuts for package authoring:
#
#   Install Package:           'Ctrl + Shift + B'
#   Check Package:             'Ctrl + Shift + E'
#   Test Package:              'Ctrl + Shift + T'

hello <- function() {
  print("Hello, world!")
}







lamprob <- function(lam, t){
  (1-lam)^(t-1)*lam
}

hazfunc <- function(t, x, betas, b_haz, ncov = 0, ...) {

  # TODO change c(5:(5+ncov)) and all similar structures to calling the actual names in names_bcov, etc.
  # time <- ifelse(t > max(x[["time"]]), data.table::last(x[["time"]]), sapply( t, function(i) min(x[["time"]][x[["time"]] >= i]) ) ) # for vectorized t, get next largest values of time in discrete time sequence of x
  covariates <- x[x[["time"]] == t, c(5:(5+ncov))] # get covariates value, and all covariate values up to ncov. right now, 5 is the index of "treat"
  if(ncov != 0){ # if there are more than 1 covariates...
    exp( rowSums(covariates*betas[betas$time == t, c(2:(2+ncov))]) )*b_haz[t] # calculate exp() of linear dot product. right now, 2 is the index of "treat" in betas matrix
  }
  else{
    exp( covariates*betas[betas$time == t, c(2:(2+ncov))] )*b_haz[t]
    #exp( covariates*rep.int(1,length(t)) )*b_haz[time]
  }
}

survive <- function(x, hazard, betas, ncov, stime, idvar, ids,
                 b_haz){
  n <- length(ids)
  store <- ids # create repository of patients with unobserved events
  df <- data.frame(ids = ids, eventtime = rep.int(0, n), status = rep.int(0, n)) # create response dataframe
  i <- 1 # set iterator

  # for all time windows: probability of failure in that window is hazard produced by haz() function
  # TODO replace for-loop with apply() df$eventtime <- apply(2:stime, function(x) ifelse(df$status[df$time == x-1] == 1))
  while(any(df$eventtime == 0) & i <= stime){ # TODO should this be a while loop, and stop when all events are observed?

    # randomly assign event to remaining patients
    # TODO very important -- call to hazard() must have appropriately indexed x and betas values
    df$eventtime[df$ids %in% store] <- ifelse(rbinom(n = length(store), size = 1, prob = hazard(t=i, x=x, betas = betas, b_haz = b_haz, ncov = ncov)) == 1, i,0) # assign current time to for patients who observe in this window

    # update store
    store <- df$ids[df$eventtime == 0]
    i <- i + 1
  }

  # update statuses
  df$status[df$eventtime != 0] <- 1
  # apply administrative censoring to any remaining patients, and leave remaining statuses as 0
  df$eventtime[df$eventtime == 0] <- stime

  return(df)
}

startA <- Sys.time()
sdatmatA1 <- sdatA
for(i in 1:100){
sdatmatA1 <- rbind(sdatmatA1, survive(x = fulldat, hazard = haz, betas = beta.mat, ncov = (num_bvar + num_tvar), stime = stime, idvar = "ids", ids = unique(fulldat$ids),
  b_haz = b_haz))
}
endA <- Sys.time()

A <- endA - startA
# The simsurv approach
startB <- Sys.time()
sdatmatB1 <- sdatB
for(i in 1:10){
  print(i)
sdatmatB1 <- rbind(sdatmatB1, simsurv( x = fulldat, hazard = haz_old, betas = beta.mat, ncov = (num_bvar + num_tvar), maxt = stime, idvar = "ids", ids = unique(fulldat$ids),
                 b_haz = b_haz))
}

bdat <- sample(x = sdatmatB1$eventtime, size = dim(sdatmatA1[1]), replace = TRUE)

endB <- Sys.time()

B <- endB - startB
# The cox model approach

hist(sdatmatA$eventtime, ylim = c(0,6000)) # without covariates
hist(sdatmatB$eventtime, ylim = c(0,6000)) # without covariates
hist(sdatmatA1$eventtime, ylim = c(0,6000)) # with covariates
hist(sdatmatB1$eventtime, ylim = c(0,6000)) # with covariates

h <- haz(t = 1,x = fulldat,betas = beta.mat, b_haz = b_haz, ncov = 6)
ho <- sapply(1:400, function(i) haz_old(t = 1, x = fulldat[((100*i) - 99),], betas = beta.mat[((100*i) - 99),], b_haz = b_haz, ncov = 6))


survive(x = fulldat, hazard = haz, betas = beta.mat, ncov = (num_bvar + num_tvar), stime = stime, idvar = "ids", ids = unique(fulldat$ids),
        b_haz = b_haz)

# Next steps:
# if the histograms of survival times WITH covariates are not the same, chase down the bug in the survival/hazard functions
#   as, evidently, different hazards are being produced. the hazards should both be step functions.
# if the histograms of survival times with covariates are the same, run through simswitch
# and simswitchfast until the creation of eventtimes with THE EXACT SAME baselines, coefs, etc. Then
# compare the eventtimes. If these arent similar, theres a bug in the data sim. If they are,
# theres a bug either in the merging of datasets, or the model estimators?












startA <- Sys.time()

surv_data_new <- survive(x = fulldat, hazard = haz, betas = beta.mat, ncov = (num_bvar + num_tvar), stime = stime, idvar = "ids", ids = unique(fulldat$ids),
                                      b_haz = b_haz)

endA <- Sys.time()
A <- endA - startA

startB <- Sys.time()

surv_data_old <- simsurv( x = fulldat, hazard = haz_old, betas = beta.mat, ncov = (num_bvar + num_tvar), maxt = stime, idvar = "ids", ids = unique(fulldat$ids),
                                         b_haz = b_haz)
endB <- Sys.time()
B <- endB - startB


hist(surv_data_new$eventtime, ylim = c(0,100))
hist(surv_data_old$eventtime, ylim = c(0,100))

















has_no_multidim_mat <- function(l){
  if(!is.list(l)) stop("Something went wrong; l isn't a list")
  # get elements which are matrices
  matrices <- l[which(lapply(l,is.matrix) == TRUE)]
  if(length(matrices) < 1) return(TRUE) # cut short if there are no matrices
  # get boolean for whether matrix is multidimensional
  if(any(lapply(matrices, function(x) dim(x)[2]) > 1)) return(FALSE)
  else(return(TRUE))
}

has_more_than_one_multidim_mat <- function(l){
  if(!is.list(l)) stop("Something went wrong; l isn't a list")
  # get elements which are matrices
  matrices <- l[which(lapply(l,is.matrix) == TRUE)]
  if(length(matrices) < 1) return(FALSE) # cut short if there are no matrices
  # get booleans for whether matrix is multidimensional
  if(sum(lapply(matrices, function(x) dim(x)[2]) > 1) > 1) return(TRUE)
  else(return(FALSE))
}

has_one_multidim_mat <- function(l){
  if(!is.list(l)) stop("Something went wrong; l isn't a list")
  # get elements which are matrices
  matrices <- l[which(lapply(l,is.matrix) == TRUE)]
  if(length(matrices) < 1) return(FALSE) # cut short if there are no matrices
  # get booleans for whether matrix is multidimensional
  if(sum(lapply(matrices, function(x) dim(x)[2]) > 1) == 1) return(TRUE)
  else(return(FALSE))
}

which_multidim_mat <- function(l){
  if(!is.list(l)) stop("Something went wrong; l isn't a list")
  # get elements which are matrices
  matrices <- l[which(lapply(l,is.matrix) == TRUE)]
  # get booleans for whether matrix is multidimensional
  return(which(lapply(matrices, function(x) dim(x)[2]) > 1))
}


#' Title
#'
#' @param add_tvar
#' @param b_allowance
#' @param b_haz
#' @param b_mag
#' @param b_scale
#' @param b_shape
#' @param bcov
#' @param beta.mat
#' @param cens_flag
#' @param covar_coef
#' @param dep_func
#' @param haz
#' @param hide_tvar
#' @param ipcw_exclude
#' @param m_allowance
#' @param m_inflation
#' @param m_fidelity
#' @param m_hard
#' @param m_haz
#' @param m_mag
#' @param m_scale
#' @param m_shape
#' @param n
#' @param num_bvar
#' @param num_tvar
#' @param prop_cens
#' @param prop_cens_allowance
#' @param prop_cont_event
#' @param prop_switch
#' @param prop_trt
#' @param prop_trt_event
#' @param recens
#' @param rerun_lim
#' @param s_allowance
#' @param s_haz
#' @param s_mag
#' @param s_scale
#' @param s_shape
#' @param stime
#' @param switch_coef
#' @param t_allowance
#' @param t_mag
#' @param treat_beta
#' @param tse_dist
#' @param unfix
#' @param verbose
#' @param violate
#'
#' @return
#' @export
#'
#' @examples
simrange <- function(add_tvar, b_allowance, b_haz, b_mag, b_scale, b_shape, bcov, beta.mat,
                     cens_flag, covar_coef, dep_func, haz, hide_tvar, ipcw_exclude,
                     m_allowance, m_inflation, m_fidelity, m_hard, m_haz, m_mag, m_scale, m_shape,
                     n, num_bvar, num_tvar, prop_cens, prop_cens_allowance, prop_cont_event, prop_switch,
                     prop_trt, prop_trt_event, recens, rerun_lim, s_allowance, s_haz, s_mag, s_scale,
                     s_shape, stime, switch_coef, t_allowance, t_mag, treat_beta, tse_dist, unfix, verbose, violate){

  # variables that should accept a range value: add_tvar, b_haz, b_scale, b_shape, hide_tvar, m_inflation, m_fidelity, m_haz, m_scale, m_shape,
  # n, num_bvar, num_tvar, prop_cens, prop_cont_event, prop_switch,
  # prop_trt, prop_trt_event, s_haz, s_scale,
  # s_shape, stime, treat_beta

  ranges <- list(add_tvar, b_scale, b_shape, hide_tvar, m_inflation, m_fidelity, m_scale, m_shape,
                 n, num_bvar, num_tvar, prop_cens, prop_cont_event, prop_switch,
                 prop_trt, prop_trt_event, s_scale,
                 s_shape, stime, treat_beta)
  haz_ranges <- list(b_haz, m_haz, s_haz)

  # Ensure that one and only one range is specified
  # Ensure that at least one is selected
  if(all(lengths(ranges) <= 1) & has_no_multidim_mat(haz_ranges) ){
    stop("You must select at least one range variable. For help, see ?simrange")
  }
  # Ensure that no more than 1 is selected
  if(sum(lengths(ranges) > 1) > 1 | has_more_than_one_multidim_mat(haz_ranges) |
     (any(lengths(ranges) > 1) & has_one_multidim_mat(haz_ranges)) ){
    stop("You can only select one range variable. For help, see ?simrange")
  }

  # set marker for whether range variable is in ranges, or in haz_ranges
  if(has_one_multidim_mat(haz_ranges)) multidim <- TRUE

  # store range_var index
  if(multidim){
    haz_range_index <- which_multidim_mat(haz_ranges)
  }else{
    range_index <- which(lengths(ranges) > 1)
  }

  # store range variable in range_var
  if(multidim){
    range_var <- haz_ranges[[haz_range_index]] # TODO get single range variable
  } else{
    range_var <- ranges[[range_index]] # TODO get single range variable
  }

  # original variable becomes first index of range_var
  if(multidim){
    haz_ranges[[haz_range_index]] <- range_var[,1] # TODO get single range variable
  }else{
    ranges[[range_index]] <- range_var[1] # TODO get single range variable
  }


  # TODO can we somehow use the ... argument here to pass outer arguments to simswitch() call?
  first_sim <- simswitch(
    add_tvar = ,
    b_allowance = 0.1,
    bcov = ,
    beta.mat = ,
    b_haz = ,
    covar_coef = ,
    # dep_func = sequence[[i-1]]$params$dep_func,
    # haz = sequence[[i-1]]$params$haz(),
    hide_tvar = ,
    # ipcw_exclude = sequence[[i-1]]$params$ipcw_exclude,
    # m_allowance = sequence[[i-1]]$params$m_allowance,
    m_fidelity = ,
    m_hard = ,
    m_haz = ,
    m_inflation = ,
    n = ,
    num_bvar = ,
    num_tvar = ,
    prop_cens = ,
    # prop_cens_allowance = sequence[[i-1]]$params$prop_cens_allowance,
    prop_cont_event = ,
    prop_switch = ,
    prop_trt = ,
    prop_trt_event = ,
    recens = ,
    rerun_lim = ,
    s_allowance = 0.025,
    s_haz = ,
    stime = ,
    switch_coef = ,
    t_allowance = 0.1,
    # tse_dist = sequence[[i-1]]$params$tse_dist,
    unfix = c("B", "M", "T")
  )

  # replace default values with previous simulation values
  ranges[["n"]] = first_sim$params$n
  ranges[["num_tvar"]] = first_sim$params$num_tvar
  ranges[["num_bvar"]] = first_sim$params$num_bvar
  ranges[["prop_trt"]] = first_sim$params$prop_trt
  ranges[["prop_switch"]] = first_sim$params$prop_switch
  ranges[["s_allowance"]] = 0.025
  ranges[["prop_cens"]] = first_sim$params$prop_cens
  ranges[["prop_cont_event"]] = first_sim$params$prop_cont_event
  ranges[["b_allowance"]] = 0.1
  ranges[["prop_trt_event"]] = first_sim$params$prop_trt
  ranges[["t_allowance"]] = 0.1
  ranges[["recens"]] = first_sim$params$recens
  ranges[["b_haz"]] = first_sim$params$b_haz
  ranges[["m_inflation"]] = first_sim$params$m_inflation
  ranges[["m_fidelity"]] = first_sim$params$m_fidelity
  ranges[["m_hard"]] = FALSE
  ranges[["unfix"]] = c("B", "M", "T")
  ranges[["bcov"]] = first_sim$params$bcov
  ranges[["beta.mat"]] = first_sim$params$beta.mat
  ranges[["covar_coef"]] = first_sim$params$covar_coef
  # ranges[["dep_func"]] = first_sim$params$dep_func
  # ranges[["haz"]] = first_sim$params$haz()
  # ranges[["ipcw_exclude"]] = first_sim$params$ipcw_exclude
  ranges[["m_haz"]] = first_sim$params$m_haz
  ranges[["s_haz"]] = first_sim$params$s_haz
  # ranges[["tse_dist"]] = first_sim$params$tse_dist
  ranges[["add_tvar"]] = first_sim$params$add_tvar
  ranges[["hide_tvar"]] = first_sim$params$hide_tvar
  # ranges[["m_allowance"]] = first_sim$params$m_allowance
  # ranges[["prop_cens_allowance"]] = first_sim$params$prop_cens_allowance
  ranges[["rerun_lim"]] = first_sim$params$rerun_lim
  ranges[["stime"]] = first_sim$params$stime
  ranges[["switch_coef"]] = first_sim$params$switch_coef

  # overwrite range variable
  ranges[[range_index]] <- range_var[2] # replace range variable with single value


  # fill out range sequence with sequential simulations
  if(multidim){
    # TODO fill in multivariate version

  }else{
    range_seq <- list() # set new list for simulation sequence
    range_seq[[1]] <- first_sim # set first simulation

    for(i in 2:length(range_var)){ # iterate through range_var values
      ranges[[range_index]] <- range_var[i] # replace range variable with single value
      range_seq[[i]] <- simswitch(
        n = range_seq[[i-1]]$params$n,
        num_tvar = range_seq[[i-1]]$params$num_tvar,
        num_bvar = range_seq[[i-1]]$params$num_bvar,
        prop_trt = range_seq[[i-1]]$params$prop_trt,
        prop_switch = switch_i[[i]],
        s_allowance = 0.025,
        prop_cens = range_seq[[i-1]]$params$prop_cens,
        prop_cont_event = range_seq[[i-1]]$params$prop_cont_event,
        b_allowance = 0.1,
        prop_trt_event = range_seq[[i-1]]$params$prop_trt,
        t_allowance = 0.1,
        recens = range_seq[[i-1]]$params$recens,
        b_haz = range_seq[[i-1]]$params$b_haz,
        m_inflation = range_seq[[i-1]]$params$m_inflation,
        m_fidelity = range_seq[[i-1]]$params$m_fidelity,
        m_hard = FALSE,
        unfix = c("B", "M", "T"),
        bcov = range_seq[[i-1]]$params$bcov,
        beta.mat = range_seq[[i-1]]$params$beta.mat,
        covar_coef = range_seq[[i-1]]$params$covar_coef,
        # dep_func = range_seq[[i-1]]$params$dep_func,
        # haz = range_seq[[i-1]]$params$haz(),
        # ipcw_exclude = range_seq[[i-1]]$params$ipcw_exclude,
        m_haz = range_seq[[i-1]]$params$m_haz,
        s_haz = range_seq[[i-1]]$params$s_haz,
        # tse_dist = range_seq[[i-1]]$params$tse_dist,
        add_tvar = range_seq[[i-1]]$params$add_tvar,
        hide_tvar = range_seq[[i-1]]$params$hide_tvar,
        # m_allowance = range_seq[[i-1]]$params$m_allowance,
        # prop_cens_allowance = range_seq[[i-1]]$params$prop_cens_allowance,
        rerun_lim = range_seq[[i-1]]$params$rerun_lim,
        stime = range_seq[[i-1]]$params$stime,
        switch_coef = range_seq[[i-1]]$params$switch_coef
      )
    }
  }


}


# TODO testrun the main function below

m3loop <- simswitchloop(seed = 12345,
                        n = 400,
                        stime = 100,
                        num_tvar = 5,
                        prop_trt = 0.5,
                        prop_switch = 0.4,
                        s_allowance = 0.05,
                        prop_cens = 0,
                        prop_cont_event = 0.7,
                        b_allowance = 0.05,
                        reps = 500,
                        ipcw_exclude = FALSE,
                        recens = TRUE,
                        m_inflation = 1.5,
                        m_shape = 3,
                        m_scale = 100,
                        m_fidelity = 0.05,
                        m_hard = TRUE,
                        rerun_lim = 400,
                        unfix = c("T"),
                        treat_beta = -0.43)

m4loop <- simswitchloop(seed = 23456,
                        n = 400,
                        stime = 100,
                        num_tvar = 5,
                        prop_trt = 0.5,
                        prop_switch = 0.4,
                        s_allowance = 0.05,
                        prop_cens = 0,
                        prop_cont_event = 0.7,
                        b_allowance = 0.05,
                        reps = 500,
                        ipcw_exclude = FALSE,
                        recens = TRUE,
                        m_inflation = 1.5,
                        m_shape = 3,
                        m_scale = 100,
                        m_fidelity = 0.05,
                        m_hard = TRUE,
                        rerun_lim = 400,
                        unfix = c("T"),
                        treat_beta = -0.43,
                        violate = "RPSFTM")

m5loop <- simswitchloop(seed = 34567,
                        n = 400,
                        stime = 100,
                        num_tvar = 5,
                        prop_trt = 0.5,
                        prop_switch = 0.4,
                        s_allowance = 0.05,
                        prop_cens = 0,
                        prop_cont_event = 0.7,
                        b_allowance = 0.05,
                        reps = 500,
                        ipcw_exclude = FALSE,
                        recens = TRUE,
                        m_inflation = 1.5,
                        m_shape = 3,
                        m_scale = 100,
                        m_fidelity = 0.05,
                        m_hard = TRUE,
                        rerun_lim = 400,
                        unfix = c("T"),
                        treat_beta = -0.43,
                        violate = "TSE")

m6loop <- simswitchloop(seed = 45678,
                        n = 400,
                        stime = 100,
                        num_tvar = 5,
                        prop_trt = 0.5,
                        prop_switch = 0.4,
                        s_allowance = 0.05,
                        prop_cens = 0,
                        prop_cont_event = 0.7,
                        b_allowance = 0.05,
                        reps = 500,
                        ipcw_exclude = FALSE,
                        recens = TRUE,
                        m_inflation = 1.5,
                        m_shape = 3,
                        m_scale = 100,
                        m_fidelity = 0.05,
                        m_hard = TRUE,
                        rerun_lim = 400,
                        unfix = c("T"),
                        treat_beta = -0.43,
                        violate = c("TSE", "IPCW") )


#######

m3 <- simswitchloop(seed = 1234,
                    n = 400,
                    stime = 100,
                    num_tvar = 5,
                    prop_trt = 0.5,
                    prop_switch = 0.4,
                    s_allowance = 0.05,
                    prop_cens = 0,
                    prop_cont_event = 0.7,
                    b_allowance = 0.05,
                    reps = 400,
                    ipcw_exclude = FALSE,
                    recens = TRUE,
                    m_inflation = 1.5,
                    m_shape = 3,
                    m_scale = 100,
                    m_fidelity = 0.05,
                    m_hard = TRUE,
                    rerun_lim = 400,
                    unfix = c("T"),
                    treat_beta = -0.43,
                    violate = "IPCW")

m4loop <- simswitchloop(seed = 2345,
                        n = 400,
                        stime = 100,
                        num_tvar = 5,
                        prop_trt = 0.5,
                        prop_switch = 0.4,
                        s_allowance = 0.05,
                        prop_cens = 0,
                        prop_cont_event = 0.7,
                        b_allowance = 0.05,
                        reps = 500,
                        ipcw_exclude = FALSE,
                        recens = TRUE,
                        m_inflation = 1.5,
                        m_shape = 3,
                        m_scale = 100,
                        m_fidelity = 0.05,
                        m_hard = TRUE,
                        unfix = c("T"),
                        treat_beta = -0.43,
                        violate = "RPSFTM")

m5loop <- simswitchloop(seed = 3456,
                        n = 400,
                        stime = 100,
                        num_tvar = 5,
                        prop_trt = 0.5,
                        prop_switch = 0.4,
                        s_allowance = 0.05,
                        prop_cens = 0,
                        prop_cont_event = 0.7,
                        b_allowance = 0.05,
                        reps = 500,
                        ipcw_exclude = FALSE,
                        recens = TRUE,
                        m_inflation = 1.5,
                        m_shape = 3,
                        m_scale = 100,
                        m_fidelity = 0.05,
                        m_hard = TRUE,
                        unfix = c("T"),
                        treat_beta = -0.43,
                        violate = "TSE")






# building collective km plots
# 1 add time zero / surv 1 to sequence, for both arms
# expand to full sequence: 0 to stime. values carry forward.
unbiased_plot0 <- data.frame(time = 1:stime)
unbiased_plot0 <- merge(unbiased_plot0,
                        km$data.survplot[km$data.survplot$strata == "arm=0",names(km$data.survplot) %in% c("time", "surv")],
                        by ="time", all = TRUE)
unbiased_plot0 %>% tidyr::fill(everything())

# plot mean and 2 quantiles



t1a <- Sys.time()
test1 <- simswitchloop(seed = 1234,
                       n = 400,
                       stime = 100,
                       num_tvar = 5,
                       prop_trt = 0.5,
                       prop_switch = 0.4,
                       s_allowance = 0.05,
                       prop_cens = 0,
                       prop_cont_event = 0.7,
                       b_allowance = 0.05,
                       reps = 50,
                       ipcw_exclude = TRUE,
                       recens = TRUE,
                       m_inflation = 1.5,
                       m_shape = 3,
                       m_scale = 100,
                       m_fidelity = 0.05,
                       m_hard = TRUE,
                       rerun_lim = 400,
                       unfix = c("T"),
                       treat_beta = -0.43)
t1b <- Sys.time()
time1 <- t1b - t1a

t2a <- Sys.time()
test2 <- simswitchloop(seed = 1234,
                       n = 400,
                       stime = 100,
                       num_tvar = 5,
                       prop_trt = 0.5,
                       prop_switch = 0,
                       s_allowance = 0.05,
                       prop_cens = 0,
                       prop_cont_event = 0.7,
                       b_allowance = 0.05,
                       reps = 200,
                       ipcw_exclude = TRUE,
                       recens = TRUE,
                       m_inflation = 1.5,
                       m_shape = 3,
                       m_scale = 100,
                       m_fidelity = 0.05,
                       m_hard = TRUE,
                       rerun_lim = 400,
                       unfix = c("T"),
                       treat_beta = -0.43)
t2b <- Sys.time()
time2 <- t2b - t2a
